import { spawn } from 'child_process'

let handler = async (m, { conn, isROwner, text }) => {
  // ููุน ุงูุงุณุชุฎุฏุงู ูู ูุถุน ุฎุงุทุฆ (ุงุฎุชูุงุฑู)
  // if (!process.send) throw 'โ ุงุณุชุฎุฏู: node index.js ุจุฏูุงู ูู node main.js'

  if (conn.user.jid == conn.user.jid) {
    async function loading() {
      // ูุณุจ ุงูุชูุฏู ุงูุธุงูุฑุฉ ุฃุซูุงุก ุฅุนุงุฏุฉ ุงูุชุดุบูู
      var progress = ["10%", "30%", "50%", "80%", "100%"]

      // ุฅุฑุณุงู ุฑุณุงูุฉ ุจุฏุก ุงูุนูููุฉ
      let { key } = await conn.sendMessage(m.chat, { text: `โป๏ธ *ุฌุงุฑู ุฅุนุงุฏุฉ ุชุดุบูู ุงูุจูุช...*` }, { quoted: m })

      // ุนุฑุถ ูุณุจุฉ ุงูุชูุฏู ุชุฏุฑูุฌููุง
      for (let i = 0; i < progress.length; i++) {
        await new Promise(resolve => setTimeout(resolve, 1000))
        await conn.sendMessage(m.chat, { text: progress[i], edit: key }, { quoted: m })
      }

      // ุฑุณุงูุฉ ุงูุงูุชูุงุก
      await conn.sendMessage(
        m.chat,
        { text: `๐ *ุชูุช ุฅุนุงุฏุฉ ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ!*\nโ ูุฑุฌู ุงูุงูุชุธุงุฑ ูุญุธุฉ ุญุชู ูุดุชุบู ุงููุธุงู ุจุงููุงูู...`, edit: key },
        { quoted: m }
      )

      // ุฅููุงุก ุงูุนูููุฉ ูุฅุนุงุฏุฉ ุงูุชุดุบูู
      process.exit(0)
    }

    loading()
  } else throw 'โ ููุณ ูุฏูู ุตูุงุญูุฉ ูุชูููุฐ ูุฐุง ุงูุฃูุฑ.'
}

handler.help = ['restart']
handler.tags = ['owner']

// ุงูุฃูุงูุฑ ุงููุชุนุฏุฏุฉ ุงููุบุงุช (ุฅูุฌููุฒูุฉ + ุฅุณุจุงููุฉ + ุนุฑุจูุฉ)
handler.command = /^(restart|reiniciar|ุงุนุงุฏุฉ|ุงุนุงุฏุฉ_ุงูุชุดุบูู|ุฑูุณุชุงุฑุช|ุงุนุฏ|ุงุนุงุฏู)$/i

handler.owner = true
export default handler

// ุฏุงูุฉ ุชุฃุฎูุฑ ุจุณูุทุฉ
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms))
